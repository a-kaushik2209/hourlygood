import React, { useState, useEffect } from 'react';
import { useLesson } from '../contexts/LessonContext';
import { useAuth } from '../contexts/AuthContext';
import { format } from 'date-fns';

function SkillLessons({ setPage }) {
  const [activeTab, setActiveTab] = useState('upcoming');
  const { 
    upcomingLessons, 
    completedLessons, 
    activeLessons,
    startLesson,
    completeLesson,
    cancelLesson,
    loading 
  } = useLesson();
  const { currentUser } = useAuth();
  const [feedbackData, setFeedbackData] = useState({ lessonId: null, rating: 5, feedback: '' });
  const [showFeedbackModal, setShowFeedbackModal] = useState(false);
  const [cancelData, setCancelData] = useState({ lessonId: null, reason: '' });
  const [showCancelModal, setShowCancelModal] = useState(false);
  
  // Handle opening chat with partner
  const handleMessage = (partnerId) => {
    console.log(`Opening chat with partner ID: ${partnerId}`);
    setPage('chat');
  };
  
  // Handle starting a lesson
  const handleStart = async (lessonId) => {
    try {
      await startLesson(lessonId);
      console.log(`Lesson ${lessonId} started successfully`);
    } catch (error) {
      console.error('Error starting lesson:', error);
    }
  };
  
  // Open feedback modal for completing a lesson
  const openFeedbackModal = (lessonId) => {
    setFeedbackData({ lessonId, rating: 5, feedback: '' });
    setShowFeedbackModal(true);
  };
  
  // Handle submitting lesson feedback and completing the lesson
  const handleSubmitFeedback = async () => {
    try {
      await completeLesson(feedbackData.lessonId, {
        rating: feedbackData.rating,
        feedback: feedbackData.feedback
      });
      setShowFeedbackModal(false);
      console.log(`Lesson ${feedbackData.lessonId} completed successfully`);
    } catch (error) {
      console.error('Error completing lesson:', error);
    }
  };
  
  // Open cancel modal for cancelling a lesson
  const openCancelModal = (lessonId) => {
    setCancelData({ lessonId, reason: '' });
    setShowCancelModal(true);
  };
  
  // Handle cancelling a lesson
  const handleSubmitCancel = async () => {
    try {
      await cancelLesson(cancelData.lessonId, cancelData.reason);
      setShowCancelModal(false);
      console.log(`Lesson ${cancelData.lessonId} cancelled successfully`);
    } catch (error) {
      console.error('Error cancelling lesson:', error);
    }
  };
  
  // Format date from Firestore timestamp
  const formatDate = (date) => {
    if (!date) return 'N/A';
    return format(date, 'yyyy-MM-dd');
  };
  
  // Format time from Firestore timestamp
  const formatTime = (date) => {
    if (!date) return 'N/A';
    return format(date, 'HH:mm');
  };
  
  // Get partner name based on role
  const getPartnerName = (lesson) => {
    return lesson.role === 'student' ? lesson.teacherName : lesson.studentName;
  };

  return (
    <div className="fade-in" style={{ maxWidth: 1000, margin: '1rem auto' }}>
      <div className="card" style={{ padding: '30px', marginBottom: '20px' }}>
        <h2 style={{ color: 'var(--primary)', marginBottom: '20px' }}>My Lessons</h2>
        
        {/* Tabs */}
        <div style={{ display: 'flex', gap: '10px', marginBottom: '30px' }}>
          <button 
            onClick={() => setActiveTab('upcoming')} 
            style={{ 
              background: activeTab === 'upcoming' ? 'var(--primary)' : '#252525',
              color: activeTab === 'upcoming' ? 'black' : '#ddd',
              padding: '10px 20px',
              borderRadius: '8px',
              border: 'none',
              cursor: 'pointer',
              flex: 1,
              maxWidth: '200px'
            }}
          >
            Upcoming Lessons
          </button>
          <button 
            onClick={() => setActiveTab('active')} 
            style={{ 
              background: activeTab === 'active' ? 'var(--primary)' : '#252525',
              color: activeTab === 'active' ? 'black' : '#ddd',
              padding: '10px 20px',
              borderRadius: '8px',
              border: 'none',
              cursor: 'pointer',
              flex: 1,
              maxWidth: '200px'
            }}
          >
            Active Lessons
          </button>
          <button 
            onClick={() => setActiveTab('completed')} 
            style={{ 
              background: activeTab === 'completed' ? 'var(--primary)' : '#252525',
              color: activeTab === 'completed' ? 'black' : '#ddd',
              padding: '10px 20px',
              borderRadius: '8px',
              border: 'none',
              cursor: 'pointer',
              flex: 1,
              maxWidth: '200px'
            }}
          >
            Completed Lessons
          </button>
        </div>
        
        {/* Loading indicator */}
        {loading && (
          <div style={{ textAlign: 'center', padding: '40px' }}>
            <div className="loader"></div>
            <div style={{ marginTop: '20px', color: '#aaa' }}>Loading your lessons...</div>
          </div>
        )}
        
        {/* Upcoming Lessons Tab */}
        {!loading && activeTab === 'upcoming' && (
          <div>
            <div style={{ marginBottom: '20px', color: '#aaa', fontSize: '14px' }}>
              {upcomingLessons.length} upcoming {upcomingLessons.length === 1 ? 'lesson' : 'lessons'}
            </div>
            
            {upcomingLessons.length > 0 ? (
              <div style={{ display: 'flex', flexDirection: 'column', gap: '15px' }}>
                {upcomingLessons.map(lesson => (
                  <div 
                    key={lesson.id} 
                    style={{ 
                      background: '#252525', 
                      padding: '20px', 
                      borderRadius: '8px',
                      borderLeft: lesson.role === 'teacher' ? '4px solid var(--primary)' : '4px solid #9c27b0'
                    }}
                  >
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '15px' }}>
                      <div>
                        <h3 style={{ color: lesson.role === 'teacher' ? 'var(--primary)' : '#9c27b0', margin: '0 0 5px 0', fontSize: '1.2rem' }}>
                          {lesson.skillName || 'Unnamed Skill'}
                        </h3>
                        <div style={{ color: '#ddd', fontSize: '15px' }}>
                          {lesson.role === 'teacher' ? 'Teaching' : 'Learning from'}: {getPartnerName(lesson)}
                        </div>
                      </div>
                      <div style={{ 
                        background: lesson.status === 'confirmed' ? '#4caf50' : '#ff9800',
                        color: 'white',
                        padding: '4px 10px',
                        borderRadius: '20px',
                        fontSize: '12px',
                        fontWeight: '500',
                        textTransform: 'capitalize'
                      }}>
                        {lesson.status}
                      </div>
                    </div>
                    
                    <div style={{ display: 'flex', gap: '15px', marginBottom: '20px' }}>
                      <div style={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: '8px',
                        color: '#aaa',
                        fontSize: '14px'
                      }}>
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                          <line x1="16" y1="2" x2="16" y2="6"></line>
                          <line x1="8" y1="2" x2="8" y2="6"></line>
                          <line x1="3" y1="10" x2="21" y2="10"></line>
                        </svg>
                        <span>{lesson.scheduledDate ? formatDate(lesson.scheduledDate) : 'N/A'}</span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: '8px',
                        color: '#aaa',
                        fontSize: '14px'
                      }}>
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <circle cx="12" cy="12" r="10"></circle>
                          <polyline points="12 6 12 12 16 14"></polyline>
                        </svg>
                        <span>{lesson.scheduledDate ? formatTime(lesson.scheduledDate) : 'N/A'}</span>
                      </div>
                    </div>
                    
                    <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>
                      <button 
                        onClick={() => handleMessage(lesson.partnerId || lesson.id)}
                        style={{ 
                          background: '#252525', 
                          color: '#ddd',
                          border: '1px solid #444',
                          padding: '8px 15px',
                          borderRadius: '5px',
                          cursor: 'pointer',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '5px',
                          fontSize: '14px'
                        }}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                        </svg>
                        Message
                      </button>
                      <button 
                        onClick={() => handleStart(lesson.id)}
                        style={{ 
                          background: '#2196f3', 
                          color: 'white',
                          border: 'none',
                          padding: '8px 15px',
                          borderRadius: '5px',
                          cursor: 'pointer',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '5px',
                          fontSize: '14px'
                        }}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <polygon points="5 3 19 12 5 21 5 3"></polygon>
                        </svg>
                        Start Lesson
                      </button>
                      <button 
                        onClick={() => openCancelModal(lesson.id)}
                        style={{ 
                          background: '#f44336', 
                          color: 'white',
                          border: 'none',
                          padding: '8px 15px',
                          borderRadius: '5px',
                          cursor: 'pointer',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '5px',
                          fontSize: '14px'
                        }}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <line x1="18" y1="6" x2="6" y2="18"></line>
                          <line x1="6" y1="6" x2="18" y2="18"></line>
                        </svg>
                        Cancel
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div style={{ textAlign: 'center', padding: '30px', color: '#aaa' }}>
                <div style={{ fontSize: '3rem', marginBottom: '20px' }}>📅</div>
                <div style={{ marginBottom: '10px' }}>No upcoming lessons</div>
                <div style={{ fontSize: '14px' }}>Request a new lesson or browse the skill marketplace</div>
              </div>
            )}
          </div>
        )}
